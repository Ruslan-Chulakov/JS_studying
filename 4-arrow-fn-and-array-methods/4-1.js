/* # –ú–æ–¥—É–ª—å 4. –ó–∞–Ω—è—Ç—Ç—è 7. –ö–æ–ª–ª–±–µ–∫–∏. –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó. forEach */

/* 
    ## Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
    –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
    - `createProduct(obj, callback)` - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂
      –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É
      –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `id` —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
    - `logProduct(product)` - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤
      –∫–æ–Ω—Å–æ–ª—å
    - `logTotalPrice(product)` - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É 
      –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å
    function createProduct(partialProduct, callback) {
    }
    function logProduct(product) {
    }
    function logTotalPrice(product) {
    }
    createProduct({name: 'üçé', price: 30, quantity: 3}, logProduct);
    createProduct({name: 'üçã', price: 20, quantity: 5}, logTotalPrice);






    // –º–æ—ë —Ä–µ—à–µ–Ω–∏–µ =============================================================

    function createProduct(partialProduct, callback) {
    partialProduct.id = 'ind-' + Math.random().toString(36).slice(2);
    
    callback(partialProduct);
}

function logProduct(product) {
 console.log(product)
}


function logTotalPrice(product) {
    console.log(product.price * product.quantity);
}
createProduct({name: 'üçé', price: 30, quantity: 3}, logProduct);
createProduct({name: 'üçã', price: 20, quantity: 5}, logTotalPrice);

// ============================================================================
*/

/* 
  ## Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
  –î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç `account` –º–µ—Ç–æ–¥–∏ `withdraw(amount, onSuccess, onError)` —Ç–∞
  `deposit(amount, onSuccess, onError)`, –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞
  –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.
  –ú–µ—Ç–æ–¥ `withdraw` –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ
  this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
  –ú–µ—Ç–æ–¥ `deposit` –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ
  –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
  const TRANSACTION_LIMIT = 1000;
  const account = {
    username: 'Jacob',
    balance: 400,
    withdraw(amount, onSuccess, onError) {
    },
    deposit(amount, onSuccess, onError) {
    },
  };
  function handleSuccess(message) {
    console.log(`‚úÖ Success! ${message}`);
  }
  function handleError(message) {
    console.log(`‚ùå Error! ${message}`);
  }
  account.withdraw(2000, handleSuccess, handleError);
  account.withdraw(600, handleSuccess, handleError);
  account.withdraw(300, handleSuccess, handleError);
  account.deposit(1700, handleSuccess, handleError);
  account.deposit(0, handleSuccess, handleError);
  account.deposit(-600, handleSuccess, handleError);
  account.deposit(600, handleSuccess, handleError);

//   ============================================================================
// mine solving


  const TRANSACTION_LIMIT = 1000;
  const account = {
    username: 'Jacob',
    balance: 400,

    withdraw(amount, onSuccess, onError) {
        if (amount > TRANSACTION_LIMIT || amount > this.balance) {
           return onError()
        }
        onSuccess()
    },

    deposit(amount, onSuccess, onError) {
        if (amount > TRANSACTION_LIMIT || amount <= 0) {
           return onError()
        }
        onSuccess()
    },
  };
  function handleSuccess(message) {
    console.log(`‚úÖ Success! ${message}`);
  }
  function handleError(message) {
    console.log(`‚ùå Error! ${message}`);
  }
  account.withdraw(2000, handleSuccess, handleError);
  account.withdraw(600, handleSuccess, handleError);
  account.withdraw(300, handleSuccess, handleError);
  account.deposit(1700, handleSuccess, handleError);
  account.deposit(0, handleSuccess, handleError);
  account.deposit(-600, handleSuccess, handleError);
  account.deposit(600, handleSuccess, handleError);



//   =======================================================================
*/

/* 
  ## Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
  –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é `each(array, callback)`, —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î
  –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É.
  –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
  –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.
  function each(array, callback) {}
  console.log(
    each([64, 49, 36, 25, 16], function (value) {
      return value * 2;
    }),
  );
  console.log(
    each([64, 49, 36, 25, 16], function (value) {
      return value - 10;
    }),
  );
  console.log(
    each([64, 49, 36, 25, 16], function (value) {
      return Math.sqrt(value);
    }),
  );
  console.log(
    each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
      return Math.ceil(value);
    }),
  );
  console.log(
    each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
      return Math.floor(value);
    }),
  );


//   ===================================================================================
// my resolution

function each(array, callback) {
     return array.map(element => callback(element));
}

console.log(
  each([64, 49, 36, 25, 16], function (value) {
    return value * 2;
  }),
);
console.log(
  each([64, 49, 36, 25, 16], function (value) {
    return value - 10;
  }),
);
console.log(
  each([64, 49, 36, 25, 16], function (value) {
    return Math.sqrt(value);
  }),
);
console.log(
  each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
    return Math.ceil(value);
  }),
);
console.log(
  each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
    return Math.floor(value);
  }),
);

// ============================================================================
*/

/* 
  ## Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –ø—Ä–∏–∫–ª–∞–¥ –∑ 1-–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è 

// =================================================================================
// my refactoring

const createProduct = (partialProduct, callback) => {
    partialProduct.id = 'ind-' + Math.random().toString(36).slice(2);
    
    callback(partialProduct);
}

const logProduct = (product) =>
 console.log(product);

const logTotalPrice = (product) =>
    console.log(product.price * product.quantity);

createProduct({name: 'üçé', price: 30, quantity: 3}, logProduct);
createProduct({name: 'üçã', price: 20, quantity: 5}, logTotalPrice);

// ===================================================================================

*/

/*
  ## Example 5 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –ø—Ä–∏–∫–ª–∞–¥ –∑ 2-–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
*/

/* 
  ## Example 6 - –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –ø—Ä–∏–∫–ª–∞–¥ –∑ 3-–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
*/

/* 
  ## Example 7 - –ú–µ—Ç–æ–¥ forEach
  –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
  function logItems(items) {
    console.log(items);
    for (let i = 0; i < items.length; i += 1) {
        console.log(`${i + 1} - ${items[i]}`);
      }
  }
  logItems(['Mango', 'Poly', 'Ajax']);
  logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

  // ================================================================================
  // my solution

  const logItems = items => {
    console.log(items);
    items.forEach((element, index) => {
       return console.log(`${index + 1} - ${element}`)
    });
  }

  logItems(['Mango', 'Poly', 'Ajax']);
  logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

  // ================================================================================
*/

/*
  ## Example 8 - –ú–µ—Ç–æ–¥ forEach
  –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
  function printContactsInfo({names, phones}) {
    const nameList = names.split(',');
    const phoneList = phones.split(',');
    for (let i = 0; i < nameList.length; i += 1) {
      console.log(`${nameList[i]}: ${phoneList[i]}`);
    }
  }
  printContactsInfo({
    names: 'Jacob,William,Solomon,Artemis',
    phones: '89001234567,89001112233,890055566377,890055566300',
  });

  // ================================================================================
  // my solution

  const printContactsInfo = ({names, phones}) => {
    const nameList = names.split(',');
    const phoneList = phones.split(',');

    nameList.forEach((elem, ind) => 
        console.log(`${elem}: ${phoneList[ind]}`)
    );
  }
  printContactsInfo({
    names: 'Jacob,William,Solomon,Artemis',
    phones: '89001234567,89001112233,890055566377,890055566300',
  });

  // ================================================================================
*/

/*
  ## Example 9 - –ú–µ—Ç–æ–¥ forEach
  –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
  function cal—ÅulateAverage(...args) {
    let total = 0;
    for (let i = 0; i < args.length; i++) {
      total += args[i];
    }
    return total / args.length;
  }
  console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
  console.log(cal—ÅulateAverage(14, 8, 2)); // 8
  console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2

  // =================================================================================
  // my solution


  const cal—ÅulateAverage = (...args) => {
    let sumOfAllNumbers = 0;
    args.forEach(element => {
        sumOfAllNumbers += element
    })
    return sumOfAllNumbers / args.length
}


console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
console.log(cal—ÅulateAverage(14, 8, 2)); // 8
console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2


// ==================================================================================
*/