// Переводит строку в режим полного соответствия современному стандарту!!!
"use strict" 
// =======================================================================


// ключевые слова, которые нельзя использовать в качестве имен (идентификаторов)!!!
// ================================================================================

// Объявление переменных

// Переменные объявленные при помощи const обязательно должны быть инициализированы значением во время объявления, иначе будет ошибка.
// Переменную объявленную как const переопределить нельзя, пи попытке присвоить ей новое значение - будет ошибка.
const nameOfVariable = "value of variable";
console.log(nameOfVariable);
// результатом будет     "value of variable"
// =========================================


// Для объявления переменной значение которой можно будет переприсваивать по ходу выполнения скрипта, используют ключевое слово let
// Переменной объявленной через let не обязательно сразу присваивать значение, можно просто дать переменной имя.

let	nameOfOneMoreVariable;
// если переменной сразу не задавать значение, то она инициализируется специальным значением undefined (НЕ ОПРЕДЕЛЕНО)
console.log(nameOfOneMoreVariable);
// результатом будет     undefined

// Если переменная объявлена как let, её значение можно переопределить (перезаписать)
nameOfOneMoreVariable = "new value";
console.log(nameOfOneMoreVariable);
// результатом будет     "new value"
// =================================
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// если объявить переменную без конст или лет, будет ошибка (если скрипт выполняется в строгом режиме)
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Примитивные типы

// целые числа и числа с плавающей запятой (точкой)
number
// Н:      20    или     15.8
// ==========================

// Строки, последовательность из нуля или более символов, строка начинается и заканчивается с ' или " 
string
// Н:     'mango' или "ice-cream"
// ==============================

// Логический тип данных, флаг состояния
boolean
// может иметь всего 2 значения правда (true) или ложь (false)
// const isLoggedIn = true;
// const canMerge = false;
// const hasChildren = true;
// const isModalOpen = false;
// ===========================================================

// Особое значение которое по сути значит НИЧТО, используется в ситуациях когда нужно явно указать пустоту
null	
// К примеру если пользователь ещё ничего не выбрал, то можно сказать что значение null.
// Н     let selectedProduct = null;
// =================================

// ещё одно специальное значение. По умолчанию, когда переменная объявляется, но не инициализируется, ее значение не определено, ей присваивается undefined.
undefined
// Н     let username;
//       console.log(username);
// результатом будет     undefined
// ===============================


// ОПЕРАТОР
typeof	
// Используется для получения типа значения переменной.
// Возвращает на место своего вызова тип значения переменной указанного после него - строку в которой указан тип.
// Н     let username;
// console.log(typeof username); // "undefined"

// let inputValue = null;
// console.log(typeof inputValue); // "object"

// const quantity = 17;
// console.log(typeof quantity); // "number"

// const message = "JavaScript is awesome!";
// console.log(typeof message); // "string"

// const isSidebarOpen = false;
// console.log(typeof isSidebarOpen); // "boolean"
// ===============================================




// Метод вывода данных
console.log()
// В круглых скобках указываем имя переменной, значение которой необходимо вывести.
// Н
// const message = "JavaScript is awesome!";
// console.log(message); // JavaScript is awesome!
// результатом будет     JavaScript is awesome!
// ===========================================


// Метод вывода данных
alert()
// выводит модальное окно, текст которого соответствует значению переменной (или литерала) которую передадим в скобках.
// ====================================================================================================================




// Метод получения данных от пользователя
confirm()
// выводит модальное окно с сообщением, и две кнопки, Ok и Cancel. 
// При нажатии на Ok, результатом будет true, при нажатии на Cancel - возвращается false
// =====================================================================================


// Метод получения данных от пользователя
prompt()
//  выводит модальное окно с полем ввода и кнопками Ok и Cancel. 
// При нажатии Ok, результатом будет то, что ввел пользователь, при Cancel - возвращается null.
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Важная особенность prompt в том, что не зависимо что ввел пользователь, всегда вернется строка. 
// То есть, если пользователь ввел 5, то вернется не число 5, а строка "5".
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


// Number(val)
// Number.parseInt()







// abstract	
// arguments	
// await	
// break	
// byte	
// case	
// catch
// char	
// class	
// continue
// debugger	
// default	
// delete	
// do
// double	
// else	
// enum	
// eval
// export	
// extends	
// false	
// final
// finally	
// float	
// for	
// function
// goto	
// if	
// implements	
// import
// in	
// instanceof	
// int	interface
// long	
// native	
// new
// package	
// private	
// protected
// public	
// return	
// short	
// static
// super	
// switch	
// synchronized	
// this
// throw	
// throws	
// transient	
// true
// try	
// var	
// void
// volatile	
// while	
// with	
// yield